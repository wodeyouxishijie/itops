/*
 * grunt-contrib-concat
 * http://gruntjs.com/
 *
 * Copyright (c) 2012 "Cowboy" Ben Alman, contributors
 * Licensed under the MIT license.
 */

'use strict';

module.exports = function(grunt) {

  // Internal lib.
  var comment = require('./lib/comment').init(grunt);

  grunt.registerMultiTask('concat', 'Concatenate files.', function() {
    // Merge task-specific and/or target-specific options with these defaults.
    var options = this.options({
      separator: grunt.util.linefeed,
      banner: '',
      footer: '',
      stripBanners: false,
      process: false
    });

    // Normalize boolean options that accept options objects.
    if (options.stripBanners === true) { options.stripBanners = {}; }
    if (options.process === true) { options.process = {}; }

    // Process banner and footer.
    var banner = grunt.template.process(options.banner);
    var footer = grunt.template.process(options.footer);

    // Iterate over all src-dest file pairs.
    this.files.forEach(function(f) {
      // Concat banner + specified files + footer.
      var src = banner + f.src.filter(function(filepath) {
        // Warn on and remove invalid source files (if nonull was set).
        if (!grunt.file.exists(filepath)) {
          grunt.log.warn('Source file "' + filepath + '" not found.');
          return false;
        } else {
          return true;
        }
      }).map(function(filepath) {
        // Read file source.
          console.log(filepath);
        var src = grunt.file.read(filepath);
        // Process files as templates if requested.
        if (typeof options.process === 'function') {
          src = options.process(src, filepath);
        } else if (options.process) {
          src = grunt.template.process(src, options.process);
        }
        // Strip banners if requested.
        if (options.stripBanners) {
          src = comment.stripBanner(src, options.stripBanners);
        }
          
          
          // 模板替换
//        if (grunt.file.exists(filepath.replace('.js', '.tpl'))) {
            var re = /<Template\.([\s\S]+?)(?:\s+(?:wrap\=(['"])([^\2]*?)\2)?(?:(nofilter))?)?>/gi;
            var rst ;
            var parts = filepath.split(/\/|\\/);
//            console.log(rst = re.exec(src), 'sdfasdfasdfsadf');
            while(rst = re.exec(src)) {
                var f = parts.slice(0, -1).concat(rst[1] + '.tpl').join('/') ;
//                console.log(rst);
                // 模板文件存在
                if (grunt.file.exists(f)) {
                    
//                    rst[0] = rst[0].replace(/\\/g, '\\\\').replace(/\|/g, '\\|').replace(/\[/g, '\\\[').replace(/\]/g, '\\\]').replace(/\}/g, '\\\}').replace(/\{/g, '\\\{');
//                    
                    var fcontent = grunt.file.read(f);
                    if (!rst[3]) {
                        fcontent = fcontent.replace(/'/g, '\\\'');
                    }
                    else if (rst[3] == '"') {
                        fcontent = fcontent.replace(/"/g, '\\"');
                    }
                    
                    else if (rst[3] == "'") {
                        fcontent = fcontent.replace(/'/g, '\\\'');
                    }
                    
//                    if (rst[5]) {
//                        var filterre = new RegExp(rst[5], 'ig');
//                        fcontent = fcontent.replace(filterre, '');
//                    }
                    if (!rst[4]) {
                        fcontent = fcontent.replace(/[\r\n\t]/g, '');
                    }
                    
                    src = src.replace(new RegExp(rst[0], 'ig'), [rst[3] || "'", fcontent, rst[3] || "'"].join(''));
                    
//                    rst[5] && (src = src.replace(filterre, '') );
                    
                }
                // 模板文件不存在从大模板文件中匹配
                else {
                    if (grunt.file.exists(filepath.replace('.js', '.tpl'))) {
                        var cont = grunt.file.read(filepath.replace('.js', '.tpl'));
    //                    var tplre = /<Template\s+name\=(["'])(\w+?)\1([\s\S]*?)<\/Template>/gi;
                        var tplre = new RegExp(rst[0] + '([\\s\\S]*?)<\\/Template>', 'ig');
                        var rcon = tplre.exec(cont);
                        if (rcon) {
                            src = src.replace(new RegExp(rst[0], 'ig'), ["'", rcon[1].replace(/[\r\n\t]/g, '').replace(/'/g, '\\\''), "'"].join(''));
                        }
                    }
                }
            }
            
//        }
        return src;
      }).join(options.separator) + footer;

      // Write the destination file.
      grunt.file.write(f.dest, src);

      // Print a success message.
      grunt.log.writeln('File "' + f.dest + '" created.');
    });
  });

};
