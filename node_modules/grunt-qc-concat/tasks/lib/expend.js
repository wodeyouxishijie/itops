
var path = require('path');
var processPatterns = function(patterns, fn, grunt) {
  // Filepaths to return.
  var result = [];
  // Iterate over flattened patterns array.
  grunt.util._.flatten(patterns).forEach(function(pattern) {
    // If the first character is ! it should be omitted
    var exclusion = pattern.indexOf('!') === 0;
    // If the pattern is an exclusion, remove the !
    if (exclusion) { pattern = pattern.slice(1); }
    // Find all matching files for this pattern.
    var matches = fn(pattern);
    if (exclusion) {
      // If an exclusion, remove matching files.
      result = grunt.util._.difference(result, matches);
    } else {
      // Otherwise add matching files.
      result = grunt.util._.union(result, matches);
    }
  });
  return result;
};
var iterate = function(rootdir,extname,grunt){
  var files = [];
  grunt.file.recurse(rootdir,function(filepath, rootdir, subdir, filename){
    if(path.extname(filepath) == extname){
      files.push(filepath);
    }
    
  })
  return files;
}
module.exports = function(patterns,grunt) { 
  // Return empty set if there are no patterns or filepaths.
  if (patterns.length === 0) { return []; }
  // Return all matching filepaths.
  var matches = processPatterns(patterns, function(pattern) {
    // Find all matching files for this pattern.
    var match = pattern.match(/(.+)~(\.\w+)$/),
        files;
    //增加目录遍历
    if(match){
      files = iterate(match[1],match[2],grunt);
    }
    else{
      files = grunt.file.glob.sync(pattern, {});
    }
    return files;
  },grunt);
  return matches;
};