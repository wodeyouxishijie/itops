/*
 * grunt-contrib-concat
 * http://gruntjs.com/
 *
 * Copyright (c) 2012 "Cowboy" Ben Alman, contributors
 * Licensed under the MIT license.
 */

'use strict';

module.exports = function(grunt) {

  // Internal lib.
  var comment = require('./lib/comment').init(grunt);
  var merge = require('./lib/merge');
  var expend = require('./lib/expend');

  var moduleNameFormat = grunt.config.data.moduleNameFormat;

function matchAttrs(str) {
//	console.log(str);
	str = str.replace(/^\s*|\s*$/g, '');
	var o = {}, parts = str.split(/\s+/);
	for (var i = 0; i < parts.length; i++) {
		var p = parts[i].split('=');
		if (p[0]) {
			if (typeof p[1] == 'undefined') {
				o[p[0]] = true;
			}
			else {
				o[p[0]] = (p[1] || '').replace(/^(['"])([\s\S]*?)\1$/, '$2');
			}
			
		}
	}
	return o;
}

function rep(fp, src) {
	var re = /<Template\.([\w\.]+)?([^>]*)>/gi, ret;
	var map = {};
	while (ret = re.exec(src)) {
//		console.log(ret);
		map[ret[1]] = ret[2];
	}
	var basepath = fp.split(/\/|\\/).slice(0, -1).join('/');
	for (var i in map) {
		var filepath = basepath + '/' + i + '.tpl'
		if (grunt.file.exists(filepath)) {
			var filesrc = grunt.file.read(filepath);
			var obj = matchAttrs(map[i] || '');
			src = src.replace(new RegExp('<Template\\.' + i + (map[i] ||'') + '>', 'ig'), function (str) {
				str = filesrc;
				obj.wrap = obj.wrap || "'";
				obj.filter = obj.filter || "[\r\n\t]";
                str = str.replace(/\\/g, '\\\\');
				if (obj.wrap == '"') {
					str = '"' + str.replace(/"/g, '\\"') + '"';
				}
				else if (obj.wrap = "'") {
					str = "'" + str.replace(/'/g, "\\'") + "'";
				}
				else {
					str = [obj.wrap, str, obj.wrap].join('');
				}
                
				obj.filter && (str = str.replace(new RegExp(obj.filter, 'ig'), ''));
				return str;
			});
		}
	}
	var definere = new RegExp(/\/\/[\s\S]*use\s+sea\s*/);
	if (definere.test(src)) {
    fp = fp.replace('.js', '');
    moduleNameFormat && (fp = moduleNameFormat(fp));
		src = "define('" + fp + "', function(require, exports, module) { " + src + "});";
	}
	return src;
};


  grunt.registerMultiTask('concat', 'Concatenate files.', function() {
    // Merge task-specific and/or target-specific options with these defaults.
    var options = this.options({
      separator: grunt.util.linefeed,
      banner: '',
      footer: '',
      stripBanners: false,
      process: false
    });

    // Normalize boolean options that accept options objects.
    if (options.stripBanners === true) { options.stripBanners = {}; }
    if (options.process === true) { options.process = {}; }

    // Process banner and footer.
    var banner = grunt.template.process(options.banner);
    var footer = grunt.template.process(options.footer);

    //this.files = grunt.file.expand({}, this.data.src);
    // Iterate over all src-dest file pairs.
    this.files.forEach(function(f) {
      f.msrc = expend(f.orig.src,grunt);
      // Concat banner + specified files + footer.
      var src = banner + f.msrc.filter(function(filepath) {
        // Warn on and remove invalid source files (if nonull was set).
        if (!grunt.file.exists(filepath)) {
          grunt.log.warn('Source file "' + filepath + '" not found.');
          return false;
        } else {
          return true;
        }
      }).map(function(filepath) {
        // Read file source.
        var src = grunt.file.read(filepath);
        // Process files as templates if requested.
        if (options.process) {
          src = grunt.template.process(src, options.process);
        }
        // Strip banners if requested.
        if (options.stripBanners) {
          src = comment.stripBanner(src, options.stripBanners);
        }

        
        //模版
        var tplFilePath;
        if(grunt.file.exists(tplFilePath = filepath.replace('.js','.tpl'))){
          src = merge(src,grunt.file.read(tplFilePath), 'string');
        } else if (grunt.file.exists(tplFilePath = filepath.replace('.js','.tpl.ejs'))) {
          src = merge(src,grunt.file.read(tplFilePath)), 'module';
        }
		src = rep(filepath, src);

        return src;
      }).join(grunt.util.normalizelf(options.separator)) + footer;

      //如果有模版
      if(f.template){
          var tpl = f.template.filter(function(filepath){
             // Warn on and remove invalid source files (if nonull was set).
            if (!grunt.file.exists(filepath)) {
              grunt.log.warn('Source file "' + filepath + '" not found.');
              return false;
            } else {
              return true;
            }
          }).map(function(filepath){
            var tpl = grunt.file.read(filepath);
            return tpl;
            
          });

          src = merge(src,tpl,'string');
      }

      // Write the destination file.
      grunt.file.write(f.dest, src);

      // Print a success message.
      grunt.log.writeln('File "' + f.dest + '" created.');
    });
  });

};
